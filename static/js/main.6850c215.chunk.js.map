{"version":3,"sources":["Components/images/college_02.jpg","Components/Pagination/Pagination.js","Components/CollegeCard/CollegeCard.js","Components/College/College.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Pagination","postPerData","totalData","paginate","pageNumber","i","Math","ceil","push","style","padding","className","map","number","key","href","onClick","CollegeCard","props","state","promoted","Intl","NumberFormat","currency","maximumSignificantDigits","format","this","college","data","index","src","Secondcollege","alt","height","width","Badge","badgeContent","rating_remarks","backgroundColor","Chip","label","tags","variant","ranking","fontWeight","college_name","Rating","name","defaultValue","rating","size","marginRight","textDecoration","toCurrency","original_fees","discount","nearest_place","discounted_fees","famous_nearest_places","fees_cycle","offertext","amenties","Component","College","console","log","setState","currentPage","pagePerData","setcurrentPage","collegeData","CollegesJson","colleges","indexOfLastPage","indexOfFirstPage","slice","length","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6850c215.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/college_02.619ee97e.jpg\";","import React from \"react\";\nimport \"./Pagination.css\";\n\nconst Pagination = ({ postPerData, totalData, paginate }) => {\n  const pageNumber = [];\n\n  for (let i = 1; i <= Math.ceil(totalData / postPerData); i++) {\n    pageNumber.push(i);\n  }\n\n  return (\n    <nav style={{padding:'30px'}}>\n      <ul className=\"Pagination\">\n        {pageNumber.map((number) => {\n          return (\n            <li key={number} className=\"page-number\">\n              <a\n                href=\"!#\"\n                className=\"page-link\"\n                onClick={() => paginate(number)}\n              >\n                {number}\n              </a>\n            </li>\n          );\n        })}\n      </ul>\n    </nav>\n  );\n};\nexport default Pagination;\n","import React, { Component} from \"react\";\nimport \"./CollegeCard.css\";\nimport Secondcollege from \"../images/college_02.jpg\";\n// import NumberFromat from \"../NumberFormat/NumberFormat\";\nimport Rating from \"@material-ui/lab/Rating\";\nimport Chip from \"@material-ui/core/Chip\";\nimport { Badge } from \"@material-ui/core\";\n\n\n\nclass CollegeCard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      promoted: \"PROMOTED\",\n    };\n  }\n\n toCurrency(number) {\n    const formatter = new Intl.NumberFormat(\"en-IN\", {\n      style: \"currency\",\n      currency: \"INR\",\n      maximumSignificantDigits: 3\n    });\n\n    return formatter.format(number);\n  }\n\n\n\n  render() {\n    return (\n      <div>\n        <div className=\"college-grid\">\n          {this.props.college.map((data, index) => {\n\n            return (\n              <div className=\"college-col\">\n                <div>\n                  <img\n                    className=\"college-image\"\n                    src={Secondcollege}\n                    alt=\"\"\n                    height=\"233.2px\"\n                    width=\"637.3px\"\n                  />\n\n                  <Badge\n                    badgeContent={data.rating_remarks}\n                    style={{ backgroundColor: \"#f5a626\" }}\n                  />\n                </div>\n                <div className=\"card-text\">\n                  <div className=\"college-chip\">\n                    <div className=\"college-tag\">\n                      <Chip\n                        className=\"chip\"\n                        label={data.tags[0]}\n                        variant=\"outlined\"\n                      />\n                      <Chip\n                        className=\"chip\"\n                        label={data.tags[1]}\n                        variant=\"outlined\"\n                      />\n                    </div>\n                    <div className=\"college-tag-text\">#{data.ranking}</div>\n                  </div>\n                  <div className=\"college-name\">\n                    <div>\n                      <span style={{ fontWeight: 400 }}>\n                        {\" \"}\n                        {data.college_name}\n                      </span>\n\n                      <Rating\n                        className=\"ratings\"\n                        name=\"size-small\"\n                        defaultValue={data.rating}\n                        size=\"small\"\n                      />\n                    </div>\n                    <div className=\"discount\">\n                      <span\n                        style={{\n                          marginRight: \"5px\",\n                          textDecoration: \"line-through\",\n                        }}\n                      >\n                        {this.toCurrency(data.original_fees)}\n                      </span>\n                      <div className=\"discount-fee\">{data.discount} </div>\n                    </div>\n                  </div>\n                  <div className=\"college-add\">\n                    <div className=\"add\">\n                      <span>{data.nearest_place[0]}</span>\n                      <span className=\"place\">{data.nearest_place[1]}</span>\n                    </div>\n                    <div className=\"fee\">\n                      <span > {this.toCurrency(data.discounted_fees)}</span>\n                    </div>\n                  </div>\n                  <div className=\"college-distance\">\n                    <div> {data.famous_nearest_places} </div>\n                    <div className=\"fee_cycle\">\n                      <span>{data.fees_cycle}</span>\n                    </div>\n                  </div>\n                  <div className=\"college-offer\">\n                    <div className=\"college-offer-text\">\n                      <span className=\"text\">{data.offertext}</span>\n                    </div>\n                    <div className=\"amneties\">\n                      <span className=\"fee-cancel\">{data.amenties[0]}</span>{\" \"}\n                      <span>.</span>\n                      <span className=\"wifi\">{data.amenties[1]}</span>\n                    </div>\n                  </div>\n                  {data.promoted === true ? (\n                    <div className=\"image-tag\">\n                      <span> {this.state.promoted} </span>\n                    </div>\n                  ) : (\n                    \" \"\n                  )}\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default CollegeCard;\n","import React, { Component } from \"react\";\nimport \"./College.css\";\nimport Pagination from \"../Pagination/Pagination\";\nimport CollegeCard from \"../CollegeCard/CollegeCard\";\nimport CollegesJson from \"../colleges.json\";\n\nclass College extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      pagePerData: 10,\n      currentPage: 1,\n      setcurrentPage: 1,\n      collegeData: CollegesJson,\n    };\n  }\n\n  paginate = (pageNumber) => {\n    console.log(pageNumber, \"asdfasd\");\n    this.setState({\n      currentPage: pageNumber,\n    });\n  };\n\n  render() {\n    const { colleges } = this.state.collegeData;\n    const indexOfLastPage = this.state.currentPage * this.state.pagePerData;\n    const indexOfFirstPage = indexOfLastPage - this.state.pagePerData;\n    const collegeData = colleges.slice(indexOfFirstPage, indexOfLastPage);\n\n    return (\n      <div className=\"College\">\n        <div className=\"college-container\">\n          <h2>Colleges in North India</h2>\n          <CollegeCard college={collegeData} />\n          <Pagination\n            postPerData={this.state.pagePerData}\n            totalData={colleges.length}\n            paginate={this.paginate}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default College;\n","import React from \"react\";\n// import logo from './logo.svg';\nimport \"./App.css\";\nimport College from \"./Components/College/College\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <College />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}